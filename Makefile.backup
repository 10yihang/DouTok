# DouTok 项目一键启动 Makefile
# 确保所有服务以正确的顺序启动

.PHONY: all dev start stop clean install-deps help frontend backend env status logs fix-docker diagnose reset-docker build-with-mirror build-images

# 默认目标：启动所有服务
all: start

# 开发环境启动（推荐）
dev: check-deps build-images env backend frontend

# 生产环境启动
start: check-deps build-images env-prod backend-prod frontend-prod

# 构建Docker镜像
build-images:
	@echo "🔨 构建Docker镜像..."
	@echo "构建 base-service..."
	@cd backend/baseService && docker build -t base-service . || echo "⚠️  base-service 构建失败，跳过..."
	@echo "构建 sv-core-service..."
	@cd backend/shortVideoCoreService && docker build -t sv-core-service . || echo "⚠️  sv-core-service 构建失败，跳过..."
	@echo "构建 sv-api-service..."
	@cd backend/shortVideoApiService && docker build -t sv-api-service . || echo "⚠️  sv-api-service 构建失败，跳过..."
	@echo "✅ Docker镜像构建完成"

# 构建单个镜像（用于开发）
build-base:
	@echo "🔨 构建 base-service..."
	@cd backend/baseService && docker build -t base-service .

build-core:
	@echo "🔨 构建 sv-core-service..."
	@cd backend/shortVideoCoreService && docker build -t sv-core-service .

build-api:
	@echo "🔨 构建 sv-api-service..."
	@cd backend/shortVideoApiService && docker build -t sv-api-service .

# 停止所有服务
stop:
	@echo "🛑 停止所有服务..."
	@cd env && docker-compose -f backends.yml down || true
	@cd env && docker-compose -f trace.yml down || true
	@cd env && docker-compose -f rocketmq.yml down || true
	@cd env && docker-compose -f basic.yml down || true
	@echo "✅ 所有服务已停止"

# 清理环境
clean: stop
	@echo "🧹 清理Docker资源..."
	@docker system prune -f || true
	@echo "✅ 清理完成"

# 检查依赖
check-deps:
	@echo "🔍 检查依赖..."
	@command -v docker >/dev/null 2>&1 || { echo "❌ 请先安装 Docker"; exit 1; }
	@command -v docker-compose >/dev/null 2>&1 || { echo "❌ 请先安装 Docker Compose"; exit 1; }
	@command -v node >/dev/null 2>&1 || { echo "❌ 请先安装 Node.js"; exit 1; }
	@command -v npm >/dev/null 2>&1 || { echo "❌ 请先安装 npm"; exit 1; }
	@command -v go >/dev/null 2>&1 || { echo "❌ 请先安装 Go"; exit 1; }
	@echo "✅ 依赖检查通过"

# 安装前端依赖
install-deps:
	@echo "📦 安装前端依赖..."
	@cd frontend/doutok && npm install
	@echo "✅ 前端依赖安装完成"

# 启动基础环境（数据库、缓存、消息队列等）
env:
	@echo "🚀 启动基础环境..."
	@cd env && make basic
	@echo "⏱️  等待基础服务启动..."
	@sleep 10
	@cd env && make mq
	@echo "⏱️  等待消息队列启动..."
	@sleep 5
	@cd env && make trace
	@echo "⏱️  等待链路追踪服务启动..."
	@sleep 5
	@echo "✅ 基础环境启动完成"

# 启动生产环境
env-prod: env

# 启动后端服务（开发模式）
backend:
	@echo "🔧 启动后端服务..."
	@echo " 启动后端容器..."
	@cd env && docker-compose -f backends.yml up -d || echo "⚠️  部分后端服务启动失败，请检查日志"
	@echo "⏱️  等待后端服务启动..."
	@sleep 15
	@echo "✅ 后端服务启动完成"

# 启动后端服务（生产模式）
backend-prod: backend

# 启动前端服务（开发模式）
frontend:
	@echo "🎨 启动前端服务..."
	@echo "📦 检查前端依赖..."
	@cd frontend/doutok && npm install
	@echo "🚀 启动前端开发服务器..."
	@cd frontend/doutok && npm run dev &
	@echo "✅ 前端服务启动完成，访问地址：http://localhost:23000"

# 启动前端服务（生产模式）
frontend-prod:
	@echo "🎨 构建并启动前端服务..."
	@cd frontend/doutok && npm install
	@cd frontend/doutok && npm run build
	@cd frontend/doutok && npm run start &
	@echo "✅ 前端生产服务启动完成，访问地址：http://localhost:3000"

# 查看服务状态
status:
	@echo "📊 服务状态检查..."
	@echo "\n🐳 Docker 容器状态："
	@docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
	@echo "\n🌐 端口使用情况："
	@netstat -tlnp 2>/dev/null | grep -E ":3000|:23000|:8080|:3306|:6379|:9092" | head -10 || echo "无法获取端口信息"

# 查看日志
logs:
	@echo "📋 最近的服务日志..."
	@echo "后端服务日志："
	@cd env && docker-compose -f backends.yml logs --tail=50 || true
	@echo "\n前端日志请查看终端输出"

# 网络诊断和修复
diagnose:
	@echo "🔍 诊断网络和Docker状态..."
	@echo "\n📊 Docker 状态："
	@docker version 2>/dev/null || echo "❌ Docker未运行或未安装"
	@echo "\n🌐 网络连接测试："
	@curl -s --connect-timeout 5 https://registry-1.docker.io/v2/ >/dev/null && echo "✅ Docker Hub连接正常" || echo "❌ Docker Hub连接失败"
	@echo "\n🐳 Docker镜像列表："
	@docker images | grep -E "(base-service|sv-.*-service)" || echo "⚠️  未找到本地镜像"
	@echo "\n💡 解决建议："
	@echo "1. 如果Docker Hub连接失败，请配置镜像加速器"
	@echo "2. 如果镜像不存在，请运行 'make build-images'"
	@echo "3. 如果构建失败，请检查 Go 环境和网络"

# 配置Docker镜像加速器
setup-docker-mirror:
	@echo "🔧 配置Docker镜像加速器..."
	@echo "请手动执行以下命令："
	@echo "sudo tee /etc/docker/daemon.json <<-'EOF'"
	@echo "{"
	@echo '  "registry-mirrors": ['
	@echo '    "https://docker.mirrors.ustc.edu.cn",'
	@echo '    "https://hub-mirror.c.163.com",'
	@echo '    "https://mirror.baidubce.com"'
	@echo "  ]"
	@echo "}"
	@echo "EOF"
	@echo ""
	@echo "然后重启Docker服务："
	@echo "sudo systemctl restart docker"

# 仅启动基础环境，跳过后端
dev-frontend-only: check-deps env frontend
	@echo "✅ 仅启动前端和基础环境完成"

# 强制重新构建镜像
rebuild-images:
	@echo "� 强制重新构建所有镜像..."
	@cd backend/baseService && docker build --no-cache -t base-service . || echo "⚠️  base-service 重新构建失败"
	@cd backend/shortVideoCoreService && docker build --no-cache -t sv-core-service . || echo "⚠️  sv-core-service 重新构建失败"
	@cd backend/shortVideoApiService && docker build --no-cache -t sv-api-service . || echo "⚠️  sv-api-service 重新构建失败"
	@echo "✅ 镜像重新构建完成"

# 重启所有服务
restart: stop
	@echo "🔄 重启所有服务..."
	@sleep 3
	@make dev

# 快速启动（跳过依赖检查）
quick:
	@echo "⚡ 快速启动..."
	@make env
	@make backend
	@make frontend

# 帮助信息
help:
	@echo "📖 DouTok 项目 Makefile 使用说明"
	@echo ""
	@echo "🎯 主要命令："
	@echo "  make dev          - 启动开发环境（推荐）"
	@echo "  make start        - 启动生产环境"
	@echo "  make stop         - 停止所有服务"
	@echo "  make restart      - 重启所有服务"
	@echo ""
	@echo "� 构建命令："
	@echo "  make build-images - 构建所有Docker镜像"
	@echo "  make build-base   - 构建 base-service 镜像"
	@echo "  make build-core   - 构建 sv-core-service 镜像"
	@echo "  make build-api    - 构建 sv-api-service 镜像"
	@echo ""
	@echo "�🔧 其他命令："
	@echo "  make env          - 仅启动基础环境"
	@echo "  make backend      - 仅启动后端服务"
	@echo "  make frontend     - 仅启动前端服务"
	@echo "  make status       - 查看服务状态"
	@echo "  make logs         - 查看服务日志"
	@echo "  make clean        - 清理环境"
	@echo "  make install-deps - 安装依赖"
	@echo "  make quick        - 快速启动（跳过检查）"
	@echo "  make diagnose     - 诊断网络和Docker状态"
	@echo ""
	@echo "🌐 服务地址："
	@echo "  前端开发环境: http://localhost:23000"
	@echo "  前端生产环境: http://localhost:3000"
	@echo "  后端API:     http://localhost:22000"
	@echo ""
	@echo "💡 遇到网络问题时："
	@echo "  1. make diagnose          # 诊断问题"
	@echo "  2. make setup-docker-mirror  # 配置镜像加速器"
	@echo "  3. make rebuild-images    # 重新构建镜像"
	@echo ""
	@echo "💡 首次使用建议："
	@echo "  1. make install-deps  # 安装依赖"
	@echo "  2. make build-images  # 构建镜像"
	@echo "  3. make dev          # 启动开发环境"

# Docker修复和诊断
fix-docker:
	@echo "🔧 修复Docker镜像问题..."
	@echo "1. 清理Docker缓存..."
	@docker system prune -af --volumes || true
	@echo "2. 清理构建缓存..."
	@docker builder prune -af || true
	@echo "3. 重启Docker服务..."
	@sudo systemctl restart docker || true
	@echo "4. 等待Docker服务启动..."
	@sleep 5
	@echo "✅ Docker修复完成"

# 完全重置Docker环境
reset-docker:
	@echo "⚠️  警告：这将删除所有Docker数据！"
	@read -p "确定要继续吗？(y/N): " confirm && [ "$$confirm" = "y" ] || exit 1
	@echo "🔥 完全重置Docker环境..."
	@docker stop $$(docker ps -aq) 2>/dev/null || true
	@docker rm $$(docker ps -aq) 2>/dev/null || true
	@docker rmi $$(docker images -q) 2>/dev/null || true
	@docker volume rm $$(docker volume ls -q) 2>/dev/null || true
	@docker network rm $$(docker network ls -q) 2>/dev/null || true
	@docker system prune -af --volumes
	@sudo systemctl restart docker
	@echo "✅ Docker环境重置完成"

# 使用国内镜像源构建
build-with-mirror:
	@echo "🇨🇳 使用国内镜像源构建..."
	@echo "配置Docker镜像加速器..."
	@sudo mkdir -p /etc/docker
	@sudo tee /etc/docker/daemon.json > /dev/null <<-'EOF'
	{
	  "registry-mirrors": [
	    "https://docker.mirrors.ustc.edu.cn",
	    "https://hub-mirror.c.163.com",
	    "https://mirror.baidubce.com"
	  ],
	  "insecure-registries": [],
	  "debug": false,
	  "experimental": false,
	  "features": {
	    "buildkit": true
	  }
	}
	EOF
	@sudo systemctl daemon-reload
	@sudo systemctl restart docker
	@echo "等待Docker重启..."
	@sleep 10
	@echo "✅ 镜像加速器配置完成"
